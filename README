Utilizare:
    make       --> pentru compliare, rezultand executabilul "main"
    make white --> pentru ca programul nostru sa joace cu alb impotriva
                   engine-ului implicit
    make black --> pentru ca programul nostru sa joace cu negru impotriva
                   engine-ului implicit
    make hwhite --> jucatorul (white) joaca impotriva engine-ului (black)
    make hblack --> jucatorul (black) joaca impotriva engine-ului (white)
    make solomid --> engine-ul nostru vs engine-ul nostru



Modul de joc:
    - executam mutari in oglinda, pana cand mutarea in oglinda nu mai este valida
    - daca jucam cu alb, mutam un pion o pozitie in fata, urmand sa mutam in
      oglinda dupa prima mutare a adversarului
    - la intalnirea unei mutari invalide, jocul se incheie prin comanda "resign"

Precizari:
    - la inceputul jocului trimitem feature-ul: sigint=0 pentru a nu primi
      semnalul SIGINT intre mutari.


Reprezentarea tablei:
    - am folosit variabile pe 8 octeti (unsigned long long)
    - fiecare bit reprezinta o pozitie de pe tabla de sah, pozitia A1 aflandu-se
      pe cel mai semnificativ bit si H8 pe cel mai putin semnificativ
    - un bit are valoarea 1 daca pe pozitia respectiva se afla o piesa si 0 altfel
    - am folosit 12 astfel de variabilie pentru a stoca pionii albi/negri,
      caii albi/negri, nebunii albi/negri, turele albe/negre si, respectiv, regina
      si regele alb/negru.
    - pentru a seta mutari pe tabla si pentru a valida mutari, am folosit operatii
      pe biti
    - de asemenea folsim variabile de tipul bitboard_t pentru a retine toate piesele
      albului, toate piesele negrului si toate piesele de pe tabla; acestea vor fi
      folosite pentru a determina daca o anumita mutare este sau nu valida


Mutarea pieselor:
    - urmatoarea mutare este intoarsa de functia getNextMove. Aceasta este doar
      un wrapper peste algoritmul minimax.
    - am testat diferite valori pentru depth, iar cea mai buna alegere a fost 3.
      Urmeaza sa optimizam codul pentru a putea mari aceasta valoare.
    - in cazul care nu se gaseste nicio mutare valida iar regele este in sah,
      inseamna ca este sah mat. Daca regele nu este in sah, atunci rezultatul
      este pat. Se fac afisarile corespunzatoare.


Algoritm minimax:
    - am folosit varianta negamax cu alpha-beta pruning.
    - implementarea este cea clasica, folosita si in laborator, iar
      valoarea intoarsa de functie este o pereche (score, mutare).
    - pentru a afla mutarile posibile ale unui jucator, am folosit functia
      getAllMoves care intoarce toate mutarile posibile ale jucatorului curent.


Functia evaluate()
    - euristica folosita atribuie scoruri pentru fiecare piesa in functie de
      pozitia ei pe tabla. In fisierul piece_square_tables.h am inclus matrici
      cu scoruri in functie de pozitie pentru fiecare piesa si culoare.
    - deoarece matricele de scoruri sunt diferite in functie de culoare, am
      creat functii evaluate specifice fiecarei culori.
